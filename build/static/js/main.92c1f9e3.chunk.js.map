{"version":3,"sources":["atoms.tsx","styles/components.ts","util.ts","components/ToDo.tsx","components/ToDoList.tsx","Router.tsx","styles/global.ts","App.tsx","index.tsx","theme.ts"],"names":["TODO_STORAGE","localStorageBoards","localStorage","getItem","savedLocalStorageTodo","JSON","parse","toDoState","atom","key","default","Form","styled","form","Main","div","Wrapper","Title","h2","Area","Card","DeleteBoardButton","button","DeleteButton","handleSaveTodoInLocalStorage","result","setItem","stringify","ToDo","boardId","toDos","useRecoilState","boards","setBoards","useForm","register","setValue","handleSubmit","useEffect","onClick","todos","copiedTodos","onBoardDelete","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","required","type","placeholder","map","deletedTodos","filter","row","onDelete","ToDoList","boardName","Object","keys","Router","path","process","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.92c1f9e3.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport const TODO_STORAGE = \"TODO_STORAGE\";\r\nconst localStorageBoards: string = localStorage.getItem(TODO_STORAGE) || \"{}\";\r\nconst savedLocalStorageTodo = JSON.parse(localStorageBoards);\r\n\r\nexport interface ITodoCategory {\r\n  [key: string]: IToDo[];\r\n}\r\n\r\nexport interface IToDo {\r\n  id: number;\r\n  text: string;\r\n}\r\n\r\nexport const toDoState = atom<ITodoCategory>({\r\n  key: \"toDo\",\r\n  default: savedLocalStorageTodo,\r\n});\r\n","import styled from \"styled-components\";\r\n\r\nexport const Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-bottom: 10px;\r\n  input {\r\n    font-size: 16px;\r\n    border: 0;\r\n    background-color: white;\r\n    width: 70%;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n\r\nexport const Main = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 300px;\r\n  margin: 10px 15px;\r\n  padding: 10px 5px;\r\n  background-color: #bdc3c7;\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  text-align: center;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const Area = styled.div`\r\n  background-color: \"#dfe6e9\"\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Card = styled.div`\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  background-color: \"#e4f2ff\";\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport const DeleteBoardButton = styled.button`\r\n  top: 12px;\r\n  right: 10px;\r\n  width: 10%;\r\n  border: none;\r\n  outline: none;\r\n  align-self: end;\r\n  cursor: pointer;\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  padding: 3px 5px;\r\n  border-radius: 50px;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const DeleteButton = styled.button`\r\n  border-radius: 35px;\r\n  border: none;\r\n  background-color: #e67e22;\r\n  cursor: pointer;\r\n`;","import { ITodoCategory, TODO_STORAGE } from \"./atoms\";\r\n\r\nexport const handleSaveTodoInLocalStorage = (result: ITodoCategory): void => {\r\n    return localStorage.setItem(TODO_STORAGE, JSON.stringify(result));\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { IToDo, ITodoCategory, toDoState } from \"../atoms\";\r\nimport {\r\n  Area,\r\n  Card,\r\n  DeleteBoardButton,\r\n  DeleteButton,\r\n  Form,\r\n  Title,\r\n  Wrapper,\r\n} from \"../styles/components\";\r\nimport { handleSaveTodoInLocalStorage } from \"../util\";\r\n\r\ninterface IBoardProps {\r\n  boardId: string;\r\n  toDos: IToDo[];\r\n}\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction ToDo({ boardId, toDos }: IBoardProps) {\r\n  const [boards, setBoards] = useRecoilState(toDoState);\r\n  const { register, setValue, handleSubmit } = useForm<IForm>();\r\n\r\n  const onValid = ({ toDo }: IForm) => {\r\n    const newToDo = {\r\n      id: Date.now(),\r\n      text: toDo,\r\n    };\r\n\r\n    setBoards((allBoards) => {\r\n      return {\r\n        ...allBoards,\r\n        [boardId]: [newToDo, ...allBoards[boardId]],\r\n      };\r\n    });\r\n\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n\r\n  const onDelete = (toDo: IToDo) => {\r\n    const sourceBoard = boards[boardId];\r\n    const deletedTodos = sourceBoard.filter((row) => row.id !== toDo.id);\r\n\r\n    setBoards((allBoards) => {\r\n      return {\r\n        ...allBoards,\r\n        [boardId]: deletedTodos,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onBoardDelete = (boardId: string) => {\r\n    setBoards((todos: ITodoCategory) => {\r\n      const copiedTodos: ITodoCategory = { ...todos };\r\n      delete copiedTodos[boardId];\r\n      const result: ITodoCategory = copiedTodos;\r\n      return result;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSaveTodoInLocalStorage(boards);\r\n  }, [boards]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Title>{boardId}</Title>\r\n      <DeleteBoardButton onClick={() => onBoardDelete(boardId)}>\r\n        ✕\r\n      </DeleteBoardButton>\r\n      <Form onSubmit={handleSubmit(onValid)}>\r\n        <input\r\n          {...register(\"toDo\", { required: true })}\r\n          type=\"text\"\r\n          placeholder={`무엇을 하시겠습니까?`}\r\n        />\r\n      </Form>\r\n      <Area>\r\n        {toDos.map((toDo) => (\r\n          <Card key={toDo.id}>\r\n            {toDo.text}\r\n            <DeleteButton onClick={() => onDelete(toDo)}>✕</DeleteButton>\r\n          </Card>\r\n        ))}\r\n      </Area>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { ITodoCategory, toDoState } from \"../atoms\";\r\nimport { Form, Main } from \"../styles/components\";\r\nimport { handleSaveTodoInLocalStorage } from \"../util\";\r\nimport ToDo from \"./ToDo\";\r\n\r\ninterface IBoard {\r\n  boardName: string;\r\n}\r\n\r\nfunction ToDoList() {\r\n  const [boards, setBoards] = useRecoilState(toDoState);\r\n  const { register, setValue, handleSubmit } = useForm<IBoard>();\r\n\r\n  const onValid = ({ boardName }: IBoard) => {\r\n    setBoards((allBoards) => {\r\n      const result: ITodoCategory = {\r\n        ...allBoards,\r\n        [boardName]: [],\r\n      };\r\n\r\n      return result;\r\n    });\r\n\r\n    setValue(\"boardName\", \"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSaveTodoInLocalStorage(boards);\r\n  }, [boards]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>J3y3h0's 투두리스트</h1>\r\n      <hr />\r\n      <Form onSubmit={handleSubmit(onValid)}>\r\n        <input\r\n          {...register(\"boardName\", { required: true })}\r\n          type=\"text\"\r\n          placeholder={`새로운 항목을 입력하세요.`}\r\n        />\r\n      </Form>\r\n      <Main>\r\n        {Object.keys(boards).map((boardId) => (\r\n          <ToDo key={boardId} boardId={boardId} toDos={boards[boardId]} />\r\n        ))}\r\n      </Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={`${process.env.PUBLIC_URL}`}>\r\n          <ToDoList />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;","import Router from \"./Router\";\r\nimport GlobalStyle from \"./styles/global\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#ecf0f1\",\r\n  textColor: \"black\",\r\n  accentColor: \"#c0392b\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n"],"sourceRoot":""}